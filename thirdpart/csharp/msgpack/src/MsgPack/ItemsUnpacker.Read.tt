<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ include file="..\Core.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #> 
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.Collections.Generic;

namespace MsgPack
{
	// This file was generated from ItemsUnpacker.Read.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit ItemsUnpacker.Read.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class ItemsUnpacker
	{
<#
this.PushIndent( 2 );

foreach( var type in
	new []
	{ 
		typeof( bool ), 
		typeof( byte ), typeof( sbyte ),
		typeof( short ), typeof( ushort ),
		typeof( int ), typeof( uint ),
		typeof( long ), typeof( ulong ),
		typeof( float ), typeof( double ),
	}
)
{
	this.WriteReadBody( type.Name, type.Name, false, () => this.WriteReadScalar( type ) );
	this.WriteReadBody( type.Name, type.Name, true, () => this.WriteReadScalar( type ) );

	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", false, () => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ) ) );
	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", true, () => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ) ) );
}

this.WriteReadBody( "Binary", "Byte[]", false, () => this.WriteReadRaw( "Byte[]", "Binary", true ) );
this.WriteReadBody( "Binary", "Byte[]", true, () => this.WriteReadRaw( "Byte[]", "Binary", true ) );
this.WriteReadBody( "String", "String", false, () => this.WriteReadRaw( "String", "String", true ) );
this.WriteReadBody( "String", "String", true, () => this.WriteReadRaw( "String", "String", true ) );

this.WriteReadBody( "Object", "MessagePackObject", false, () => this.WriteReadObject() );
this.WriteReadBody( "Object", "MessagePackObject", true, () => this.WriteReadObject() );
this.WriteReadBody( "ArrayLength", "Int64", false, () => this.WriteReadLength( "ArrayLength", false ) );
this.WriteReadBody( "ArrayLength", "Int64", true, () => this.WriteReadLength( "ArrayLength", false ) );
this.WriteReadBody( "MapLength", "Int64", false, () => this.WriteReadLength( "MapLength", false ) );
this.WriteReadBody( "MapLength", "Int64", true, () => this.WriteReadLength( "MapLength", false ) );

this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", false, () => this.WriteReadExt() );
this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", true, () => this.WriteReadExt() );
this.PopIndent();
#>
	}
}

<#+

private static readonly Type[] ScalarTypes =
			new []
			{
				typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
				typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
				typeof( float ), typeof( double )
			};

private static readonly string[] ExtCodes = new [] { "FixExt1", "FixExt2", "FixExt4", "FixExt8", "FixExt16", "Ext8", "Ext16", "Ext32" };

private class TypeCodeMapping
{
	public string Code { get; set; }
	public Type CodeType { get; set; }
	public int Size { get; set; }
}

private static readonly TypeCodeMapping[] TypeCodeMappings =
		new [] 
		{
			"SByte", "Int16", "Int32", "Int64",
			"Byte", "UInt16", "UInt32", "UInt64",
			"Single", "Double"
		}.Zip( ScalarTypes,
			( code, codeType ) => new TypeCodeMapping{ Code = code, CodeType = codeType, Size = Marshal.SizeOf( codeType ) }
		).ToArray();

private void WriteReadBody( string typeName, string fullTypeName, bool isForSubtree, Action bodyWriter )
{
	var firstParameter = ( isForSubtree && typeName == "Object" ) ? "bool isDeep, " : String.Empty;
	var firstArgument = ( !isForSubtree && typeName == "Object" ) ? "/* isDeep */true, " : String.Empty;
#>
<#= isForSubtree ? "internal" : "public override" #> bool Read<#= isForSubtree ? "Subtree" : String.Empty #><#= typeName #>( <#= firstParameter #>out <#= fullTypeName #> result )
{
<#+
	if( !isForSubtree )
	{
#>
#if !UNITY
	this.EnsureNotInSubtreeMode();
#endif // !UNITY

	return this.ReadSubtree<#= typeName #>( <#= firstArgument #>out result );
<#+
	}
	else
	{
		this.PushIndent( 1 );
		bodyWriter();
		this.PopIndent();
	}
#>
}

<#+
} // WriteReadBody

private void WriteReadBodyCore( string typeName, bool isNullable, Action<string, DecodedVariable, string> bodyWriter )
{
#>
byte header;
long integral;
float real32;
double real64;
var type = this.ReadValue( out header, out integral, out real32, out real64 );
switch( type )
{
	case ReadValueResult.Eof:
	{
		result = default( <#= typeName #> );
		return false;
	}
<#+
	if( isNullable )
	{
#>
	case ReadValueResult.Nil:
	{
<#+
		this.PushIndent( 2 );
		this.OnReturnScalar();
		this.PopIndent();
#>
		result = null;
		return true;
	}
<#+
	} // if( isNullable )

	this.PushIndent( 1 );
	bodyWriter( "type", new DecodedVariable( "integral", "real32", "real64" ), "result" );
	this.PopIndent();
#>
	default:
	{
		this.ThrowTypeException( typeof( <#= typeName #> ), header );
		result = default( <#= typeName #> ); // Never reach
		return false; // Never reach
	}
}
<#+
} // WriteReadBodyCore( Type type, bool isNullable, Action<string, DecodedVariable, string> bodyWriter )

private void WriteReadScalar( Type type )
{
	var nullableUnderlying  = Nullable.GetUnderlyingType( type );
	WriteReadBodyCore( ( nullableUnderlying ?? type ).Name, nullableUnderlying != null, ( t, valueVar, resultVar ) => WriteReadScalarCore( nullableUnderlying ?? type, nullableUnderlying != null, valueVar, resultVar ) );
}

private void WriteReadScalarCore( Type type, bool isNullable, DecodedVariable valueVariable, string resultVariable )
{
	if( type == typeof( bool ) )
	{
#>
case ReadValueResult.Boolean:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= valueVariable.Integral #> != 0;
	return true;
}
<#+
		return; // bool is done.
	} // if( type == typeof( bool ) )

	var thisEntry = TypeCodeMappings.SingleOrDefault( e => e.CodeType == type );
	if( thisEntry != null )
	{
		// For same type
#>
case ReadValueResult.<#= thisEntry.Code #>:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #>  = <#= CastIfNecessary( GetSourceType( type ), type, false, valueVariable.Get( type ), false ) #>;
	return true;
}
<#+
	} // if

	foreach( var entry in TypeCodeMappings.Where( e => CanConvertTo( type, e.Size ) && e.CodeType != type ) )
	{
		if ( entry.CodeType == typeof( ulong ) || entry.CodeType == typeof( float ) || entry.CodeType == typeof( double ) )
		{
			// UInt64 and Reals should be treated as spetially.
			continue;
		}
#>
case ReadValueResult.<#= entry.Code #>:
<#+
	} // foreach
#>
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( typeof( long ), type, true, valueVariable.Integral, false ) #>;
	return true;
}
<#+

	if( type != typeof( ulong ) )
	{
#>
case ReadValueResult.UInt64:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( typeof( ulong ), type, true, valueVariable.Integral, true ) #>;
	return true;
}
<#+
	}

	if( type != typeof( float ) )
	{
#>
case ReadValueResult.Single:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( typeof( float ), type, true, valueVariable.Real32, false ) #>;
	return true;
}
<#+
	}

	if( type != typeof( double ) )
	{
#>
case ReadValueResult.Double:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( typeof( double ), type, true, valueVariable.Real64, false ) #>;
	return true;
}
<#+
	}
} // WriteReadScalarCore()

private void WriteReadLength( string code, bool isNullable )
{
	WriteReadBodyCore( "Int64", isNullable, ( t, valueVar, resultVar ) => this.WriteReadLengthCore( code, valueVar, resultVar ) );
} // WriteReadLength( string typeName, string code )

private void WriteReadLengthCore( string code, DecodedVariable valueVariable, string resultVariable )
{
#>
case ReadValueResult.<#= code #>:
{
	<#= resultVariable #> = this.Read<#= code #>Core( <#= valueVariable.Integral #> );
	this.CheckLength( <#= resultVariable #>, ReadValueResult.<#= code #> );
	return true;
}
<#+
} // WriteReadLengthCore( string code, string headerVariable, DecodedVariable valueVariable, string resultVariable )


private void WriteReadRaw( string typeName, string code, bool isNullable )
{
	WriteReadBodyCore( typeName, isNullable, ( t, valueVar, resultVar ) => this.WriteReadRawCore( code, valueVar, resultVar ) );
} // WriteReadRaw( string typeName, string code )

private void WriteReadRawCore( string code, DecodedVariable valueVariable, string resultVariable )
{
#>
case ReadValueResult.String:
case ReadValueResult.Binary:
{
	<#= resultVariable #> = this.Read<#= code #>Core( <#= valueVariable.Integral #> );
	return true;
}
<#+
} // WriteReadRawCore( string code, string headerVariable, DecodedVariable valueVariable, string resultVariable )

private void WriteReadObject()
{
	WriteReadBodyCore( "MessagePackObject", false, ( typeVar, valueVar, resultVar ) => this.WriteReadObjectCore( typeVar, valueVar, resultVar ) );
} // WriteReadObject()

private void WriteReadObjectCore( string typeVariable, DecodedVariable valueVariable, string resultVariable )
{
#>
case ReadValueResult.Nil:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = MessagePackObject.Nil;
	this.InternalData = <#= resultVariable #>;
	return true;
}
case ReadValueResult.Boolean:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= valueVariable.Integral #> != 0;
	this.InternalData = <#= resultVariable #>;
	return true;
}
<#+
	foreach( var entry in TypeCodeMappings )
	{
#>
case ReadValueResult.<#= entry.Code #>:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.PopIndent();
#>
	<#= resultVariable #> = <#= CastIfNecessary( GetSourceType( entry.CodeType ), entry.CodeType, false, valueVariable.Get( entry.CodeType ), false ) #>;
	this.InternalData = <#= resultVariable #>;
	return true;
}
<#+
	} // foreach -- scalar

// Array/Map
#>
case ReadValueResult.ArrayLength:
{
	var length = <#= CastIfNecessary( typeof( long ), typeof( uint ), false, "this.ReadArrayLengthCore( " + valueVariable.Integral + " )", false ) #>;
	if ( !isDeep )
	{
		<#= resultVariable #> = length;
		return true;
	}

	this.CheckLength( length, ReadValueResult.ArrayLength );
	var collection = new List<MessagePackObject>( unchecked( ( int ) length ) );
	for( var i = 0; i < length; i++ )
	{
		MessagePackObject item;
		if( !this.ReadSubtreeObject( /* isDeep */true, out item ) )
		{
			<#= resultVariable #> = default( MessagePackObject );
			return false;
		}

		collection.Add( item );
	}
	<#= resultVariable #> = new MessagePackObject( collection, /* isImmutable */true );
	return true;
}
case ReadValueResult.MapLength:
{
	var length = <#= CastIfNecessary( typeof( long ), typeof( uint ), false, "this.ReadMapLengthCore( " + valueVariable.Integral + " )", false ) #>;
	if ( !isDeep )
	{
		<#= resultVariable #> = length;
		return true;
	}

	this.CheckLength( length, ReadValueResult.MapLength );
	var collection = new MessagePackObjectDictionary( unchecked( ( int ) length ) );
	for( var i = 0; i < length; i++ )
	{
		MessagePackObject key;
		if( !this.ReadSubtreeObject( /* isDeep */true, out key ) )
		{
			<#= resultVariable #> = default( MessagePackObject );
			return false;
		}

		MessagePackObject value;
		if( !this.ReadSubtreeObject( /* isDeep */true, out value ) )
		{
			<#= resultVariable #> = default( MessagePackObject );
			return false;
		}

		collection.Add( key, value );
	}
	<#= resultVariable #> = new MessagePackObject( collection, /* isImmutable */true );
	return true;
}

<#+
// Array/Map

#>
case ReadValueResult.String:
{
	<#= resultVariable #> = new MessagePackObject( new MessagePackString( this.ReadBinaryCore( <#= valueVariable.Integral #> ), false ) );
	this.InternalData = <#= resultVariable #>;
	return true;
}
case ReadValueResult.Binary:
{
	<#= resultVariable #> = new MessagePackObject( new MessagePackString( this.ReadBinaryCore( <#= valueVariable.Integral #> ), true ) );
	this.InternalData = <#= resultVariable #>;
	return true;
}
<#+
	this.WriteReadExtCore( typeVariable, resultVariable, true );
} // WriteReadObjectCore( string typeVariable, DecodedVariable valueVariable, string resultVariable )


private void WriteReadExt()
{
	WriteReadBodyCore( "MessagePackExtendedTypeObject", false, ( typeVar, v, resultVar ) => this.WriteReadExtCore( typeVar, resultVar, false ) );
} // WriteReadExt()

private void WriteReadExtCore( string typeVariable, string resultVariable, bool isMpo )
{

	foreach( var code in ExtCodes )
	{
#>
case ReadValueResult.<#= code #>:
<#+
	} // foreach
#>
{
	<#= resultVariable #> = this.ReadMessagePackExtendedTypeObjectCore( <#= typeVariable #> );
<#+
	if( isMpo )
	{
#>
	this.InternalData = <#= resultVariable #>;
<#+
	}
#>
	return true;
}
<#+
} // WriteReadExtCore( string headerVariable, string resultVariable )


private void OnReturnScalar()
{
#>
this.InternalCollectionType = CollectionType.None;
<#+
} // OnReturnScalar()

private bool CanConvertTo( Type destination, int size )
{
	switch( Type.GetTypeCode( destination ) )
	{
		case TypeCode.Single:
		case TypeCode.Double:
		{
			return true;
		}
		default:
		{
			return System.Runtime.InteropServices.Marshal.SizeOf( destination ) >= size / 8;
		}
	}
} // CanConvertTo( Type destination, String source )

private static string CastIfNecessary( Type sourceType, Type targetType, bool shouldCheckOverflow, string sourceExpression, bool shouldInsertUInt64Cast )
{
	if ( sourceType == targetType )
	{
		return 
			shouldInsertUInt64Cast
			? String.Format( CultureInfo.InvariantCulture, "unchecked( ( UInt64 ){0} )", sourceExpression )
			: sourceExpression;
	}

	if( sourceType == typeof( float ) )
	{
		if( targetType == typeof( double ) )
		{
			return sourceExpression;
		}
	}
	else if( sourceType != typeof( double ) )
	{
		if( targetType == typeof( long ) )
		{
			return 
				shouldInsertUInt64Cast
				? String.Format( CultureInfo.InvariantCulture, "checked( ( Int64 )( UInt64 ){0} )", sourceExpression )
				: sourceExpression;
		}

		if ( targetType == typeof( float ) || targetType == typeof( double ) )
		{
			return 
				shouldInsertUInt64Cast
				? String.Format( CultureInfo.InvariantCulture, "unchecked( ( UInt64 ){0} )", sourceExpression )
				: sourceExpression;
		}
	}

	return String.Format( CultureInfo.InvariantCulture, "{0}( ( {1} ){2}{3} )", ( shouldCheckOverflow ? "checked" : "unchecked" ), targetType.Name, ( shouldInsertUInt64Cast ? "( UInt64 )" : String.Empty ), sourceExpression );
} // CastIfNecessary( Type sourceType, Type targetType, bool shouldCheckOverflow, string sourceExpression )

private static Type GetSourceType( Type targetType )
{
	return 
		targetType == typeof( float )
		? typeof( float )
		: targetType == typeof( double )
		? typeof( double )
		: typeof( long );
}

private class DecodedVariable
{
	public string Integral { get; private set; }
	public string Real32 { get; private set; }
	public string Real64 { get; private set; }

	public DecodedVariable( string integral, string real32, string real64 )
	{
		this.Integral = integral;
		this.Real32 = real32;
		this.Real64 = real64;
	}

	public string Get( Type type )
	{
		if( type == typeof( float ) )
		{
			return this.Real32;
		}

		if( type == typeof( double ) )
		{
			return this.Real64;
		}

		return this.Integral;
	}
}
#>